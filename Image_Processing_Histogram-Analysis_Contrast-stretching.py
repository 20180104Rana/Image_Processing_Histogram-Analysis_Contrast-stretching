# -*- coding: utf-8 -*-
"""Image_Processing_Assignment_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1l6Oo4Uokl_pZ-Sb7qUNFR0E3gtIXHleg

# Read Image
"""

import matplotlib.pyplot as plt
import cv2
import numpy as np
from PIL import Image

# reads an input image
img = cv2.imread('/content/pout.jpg',0)

"""# Original Image"""

fname = '/content/pout.jpg'
image = Image.open(fname).convert("L")
arr = np.asarray(image)
plt.imshow(arr, cmap='gray', vmin=0, vmax=255)
plt.show()

"""# Histogram of Original Image"""

# # find frequency of pixels in range 0-255
# histr = cv2.calcHist([img],[0],None,[256],[0,256])

# alternative way to find histogram of an image
plt.hist(img.ravel(),256,[0,256],color='darkslategray')
plt.show()

# # show the plotting graph of an image
# plt.plot(histr,color='crimson')
# plt.show()

# find frequency of pixels in range 0-255
histr = cv2.calcHist([img],[0],None,[256],[0,256])

# show the plotting graph of an image
plt.plot(histr,color='darkslategray')
plt.show()

h = [(img==v).sum() for v in range(256)]
print(len(h) )
plt.figure()
plt.bar(range(256), h,color='darkslategray')
plt.show()

"""# Histogram with norm"""

import numpy as np

h = np.array(h)
norm_h = h/h.sum()

plt.figure()
plt.bar(range(256), norm_h , color='darkslategray')
plt.show()

"""# Experiment-1_cumulative histogram"""

cumul_h = np.zeros((256,))
for i in range(256):
    cumul_h[i] = h[i]+cumul_h[i-1]

plt.figure()
plt.bar(range(256), cumul_h , color='darkslategray')
plt.show()

"""# cumulative histogram with norm"""

cumul_h_norm = np.zeros((256,))
for i in range(256):
    cumul_h_norm[i] = norm_h[i]+cumul_h_norm[i-1]

plt.figure()
plt.bar(range(256), cumul_h_norm , color='darkslategray')
plt.show()

"""# Histogram Equalization"""

# import Opencv
import cv2
from google.colab.patches import cv2_imshow
# import Numpy
import numpy as np

# creating a Histograms Equalization of a image using cv2.equalizeHist()
equ = cv2.equalizeHist(img)

# stacking images side-by-side
res = np.hstack((img, equ))

# show image input vs output
cv2_imshow(res)

# find frequency of pixels in range 0-255
histo_equalization = cv2.calcHist([res],[0],None,[256],[0,256])

# alternative way to find histogram of an image
plt.hist(img.ravel(),256,[0,256], color='darkslategray')
plt.show()

# show the plotting graph of an image
plt.plot(histo_equalization, color='darkslategray')
plt.show()

# alternative way to find histogram of an image
plt.hist(equ.ravel(),256,[0,256],color='darkslategray')
plt.show()

"""# cumulative equalization histogram"""

cumul_eq = np.zeros((256,))
for i in range(256):
    cumul_eq[i] = histo_equalization[i]+cumul_eq[i-1]

plt.figure()
plt.bar(range(256), cumul_eq , color='darkslategray')
plt.show()



"""# Experiment-2_The original image range"""

# Apply Min-Max Contrasting
min = np.min(img)
max = np.max(img)
print("Min of original image", min)
print("Max of orignial image", max)

"""# Contrast Stretched"""

# Create an empty array to store the final output
image_cs = np.zeros((img.shape[0],img.shape[1]),dtype = 'uint8')

for i in range(img.shape[0]):
    for j in range(img.shape[1]):
        image_cs[i,j] = 255*(img[i,j]-min)/(max-min)

"""# Contrast Stretched Image"""

# Original Image
plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))

# Contrast Stretched Image
plt.imshow(cv2.cvtColor(image_cs, cv2.COLOR_BGR2RGB))

"""# Histogram of Contrast Stretched Image"""

# alternative way to find histogram of an image
plt.hist(image_cs.ravel(),256,[0,256],color='darkslategray')
plt.show()

"""# The Contrast Stretched image range"""

# Apply Min-Max Contrasting
min = np.min(image_cs)
max = np.max(image_cs)
print("Min of Contrast Stretched image", min)
print("Max of Contrast Stretched image", max)